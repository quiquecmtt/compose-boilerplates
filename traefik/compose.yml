services:
  proxy:
    image: docker.io/traefik:latest
    restart: unless-stopped
    environment:
      TS_TLD: ${TS_TLD:?err}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - 80:80/tcp
      - 80:80/udp
      - 443:443/tcp
      - 443:443/udp
    volumes:
      - ./configs/traefik.yml:/traefik.yml
      - ./configs/dynamic:/dynamic
      - /var/run/docker.sock:/var/run/docker.sock
      - ts-certs:/ts-certs
      - ts-sockets:/ts-sockets
    healthcheck:
      test: touch /dynamic/auto_reload.yml
      interval: 86400s
      timeout: 300s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    labels:
      traefik.enable: true
      traefik.http.routers.traefik.entrypoints: web-secure
      traefik.http.routers.traefik.rule: PathPrefix(`/traefik`) || HeaderRegexp(`Referer`,`.*/traefik/.*`)
      traefik.http.routers.traefik.middlewares: "authentik-fa@file"
      # traefik.http.routers.traefik.middlewares: strip-prefix@file
      # traefik.http.routers.traefik.tls: true
      traefik.http.routers.traefik.service: api@internal
  error-pages:
    image: ghcr.io/tarampampam/error-pages:3 # using the latest tag is highly discouraged
    environment:
      TEMPLATE_NAME: ghost # set the error pages template
      SHOW_DETAILS: true
    labels:
      traefik.enable: true
      # use as "fallback" for any NON-registered services (with priority below normal)
      traefik.http.routers.error-pages.rule: HostRegexp(`.+`)
      traefik.http.routers.error-pages.priority: 10
      # should say that all of your services work on https
      traefik.http.routers.error-pages.entrypoints: web-secure
      # traefik.http.routers.error-pages.middlewares: error-pages
      # traefik.http.routers.error-pages.tls: true
      # "errors" middleware settings
      traefik.http.middlewares.error-pages.errors.status: 400-599
      traefik.http.middlewares.error-pages.errors.service: error-pages
      traefik.http.middlewares.error-pages.errors.query: /{status}.html
      # define service properties
      traefik.http.services.error-pages.loadbalancer.server.port: 8080
  whoami:
    image: docker.io/traefik/whoami
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.whoami.entrypoints: web-secure
      traefik.http.routers.whoami.rule: PathPrefix(`/whoami`) || HeaderRegexp(`Referer`,`.*/whoami/.*`)
      # traefik.http.routers.whoami.middlewares: strip-prefix@file
      # traefik.http.routers.whoami.tls: true
      traefik.http.services.whoami.loadbalancer.server.port: 80
  speedtest:
    image: docker.io/openspeedtest/latest:latest
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.speedtest.entrypoints: web-secure
      traefik.http.routers.speedtest.rule: PathPrefix(`/speedtest`) || HeaderRegexp(`Referer`,`.*/speedtest/.*`)
      traefik.http.middlewares.openspeedtest-limit-upload.buffering.maxRequestBodyBytes: 20000000000
      traefik.http.routers.speedtest.middlewares: openspeedtest-limit-upload
      # traefik.http.routers.speedtest.tls: true
      traefik.http.services.speedtest.loadbalancer.server.port: 3000

volumes:
  ts-certs:
    external: true
    name: tailscale-certs
  ts-sockets:
    external: true
    name: tailscale-sockets

networks:
  default:
    name: traefik-net
