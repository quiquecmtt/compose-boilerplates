services:
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    privileged: true
    command:
      - --prometheus_endpoint=/metrics/containers/
      - --store_container_labels=false
      - --whitelisted_container_labels=com.docker.compose.project,com.docker.compose.service
    profiles:
      - exporters
    # ports:
    #   - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    restart: unless-stopped
    healthcheck:
      disable: true
    networks:
      default:
      traefik-network:
    labels:
      traefik.enable: true
      traefik.http.routers.cadvisor.entrypoints: web-secure
      traefik.http.routers.cadvisor.rule: Host(`${HOSTNAME:?err}.${TS_TLD:?err}`) && PathPrefix(`/metrics/containers`)
      # traefik.http.routers.cadvisor.middlewares: "authentik-fa@file"
      traefik.http.routers.cadvisor.tls: true
      traefik.http.routers.cadvisor.service: cadvisor
      traefik.http.services.cadvisor.loadbalancer.server.port: 8080
  grafana:
    image: docker.io/grafana/grafana:latest
    profiles:
      - servers
    environment:
      GF_SERVER_ROOT_URL: "%(protocol)s://%(domain)s:%(http_port)s/grafana/"
      GF_SERVER_SERVE_FROM_SUB_PATH: "true"
    networks:
      default:
      traefik-network:
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.grafana.entrypoints: web-secure
      traefik.http.routers.grafana.rule: Host(`monitoring.${TS_TLD:?err}`) && PathPrefix(`/grafana`)
      # traefik.http.routers.grafana.middlewares: "authentik-fa@file"
      traefik.http.routers.grafana.tls: true
      traefik.http.routers.grafana.service: grafana
      traefik.http.services.grafana.loadbalancer.server.port: 3000
  loki:
    image: docker.io/grafana/loki:latest
    profiles:
      - servers
    restart: unless-stopped
  mimir:
    image: docker.io/grafana/mimir:latest
    profiles:
      - servers
    restart: unless-stopped
  node-exporter:
    image: docker.io/prom/node-exporter:latest
    network_mode: host
    pid: host
    command:
      - --path.rootfs=/host
      - --web.telemetry-path=/metrics/node/
    profiles:
      - exporters
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.node-metrics.entrypoints: web-secure
      traefik.http.routers.node-metrics.rule: Host(`${HOSTNAME:?err}.${TS_TLD:?err}`) && PathPrefix(`/metrics/node`)
      # traefik.http.routers.node-metrics.middlewares: "authentik-fa@file"
      traefik.http.routers.node-metrics.tls: true
      traefik.http.routers.node-metrics.service: node-metrics
      traefik.http.services.node-metrics.loadbalancer.server.port: 9100
  smartctl-exporter:
    image: docker.io/prometheuscommunity/smartctl-exporter:latest
    privileged: true
    command:
      - --web.telemetry-path=/metrics/smart/
    profiles:
      - exporters
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.smartctl-metrics.entrypoints: web-secure
      traefik.http.routers.smartctl-metrics.rule: Host(`${HOSTNAME:?err}.${TS_TLD:?err}`) && PathPrefix(`/metrics/smart`)
      # traefik.http.routers.smartctl-metrics.middlewares: "authentik-fa@file"
      traefik.http.routers.smartctl-metrics.tls: true
      traefik.http.routers.smartctl-metrics.service: smartctl-metrics
      traefik.http.services.smartctl-metrics.loadbalancer.server.port: 9633
  prometheus:
    image: docker.io/prom/prometheus:latest
    profiles:
      - servers
    restart: unless-stopped

networks:
  traefik-network:
    name: traefik-net
    external: true

volumes:
  grafana-data:
